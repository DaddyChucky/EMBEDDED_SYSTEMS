########       AVR Project Makefile       ########
#####                                        #####
#####      Makefile produit et ecrit par     #####
#####   Simon Barrette & Jerome Collin pour  #####
#####           INF1900 - 2016               #####
#####                                        #####
#####         Inspire de Pat Deegan -        #####
#####  Psychogenic Inc (www.psychogenic.com) #####
##################################################

# Adapté par 109-115-117.

# Ce Makefile vous permet de compiler des projets
# pour les microcontrôleurs Atmel AVR sur 
# Linux ou Unix, en utilisant l'outil AVR-GCC. 
# Ce Makefile supporte C & C++

####### Détails généraux spécifiques à la cible #######

# Nom du microcontrôleur cible
MCU=atmega324pa

# Niveau d'optimisation
# Utilisez <s (size opt), 1, 2, 3 ou 0 (off)>
OPTLEVEL=s

# Programmer ID
AVRDUDE_PROGRAMMERID=usbasp

####### Implémentation #######

####### Variables globales #######

# Compilateur
CC=avr-gcc
# Pour copier le contenu d'un fichier objet vers un autre
OBJCOPY=avr-objcopy
# Pour permettre le transfert vers le microcontroleur
AVRDUDE=avrdude
# Pour supprimer les fichiers lorsque l'on appel <make clean>
REMOVE=rm -f
# HEXFORMAT -- format pour les fichiers produits en .hex
HEXFORMAT=ihex


####### Options de compilation #######

# Flags pour le compilateur en C
CFLAGS=-I. -I/usr/include/simavr  -I $(INC) -g -mmcu=$(MCU) -O$(OPTLEVEL) \
	-std=c++14 -fpack-struct -fshort-enums             \
	-funsigned-bitfields -funsigned-char    \
	-Wall                                        

# Flags pour le compilateur en C++
CXXFLAGS=-fno-exceptions     

# Linker pour lier les librairies utilisées
LDFLAGS=-Wl,-Map,$(TRG).map -mmcu=$(MCU)


####### Cible (Target) #######

# Nom des cibles par défaut
TRG=$(PROJECTNAME).elf
HEXROMTRG=$(PROJECTNAME).hex
HEXTRG=$(HEXROMTRG) $(PROJECTNAME).ee.hex


####### Définition de tout les fichiers objets #######

# Cette fonction permet de différencier les fichiers .c
# des fichiers .cpp
# Fichier C
CFILES=$(filter %.c, $(PRJSRC))
# Fichier C++
CPPFILES=$(filter %.cpp, $(PRJSRC))

# Liste de tous les fichiers objets que nous devons créer
OBJDEPS=$(CFILES:.c=.o) \
	$(CPPFILES:.cpp=.o)


####### Création des commandes du Makefile ####### 

# Création des cibles Phony (Phony Target)
.PHONY: all install clean 

# Make all permet simplement de compiler le projet
all: $(TRG) $(HEXROMTRG)

# Débogage
debug: CFLAGS 	+= -DDEBUG -g
debug: CXXFLAGS += -DDEBUG -g
debug: clean all

# Implémentation de la cible
$(TRG): $(OBJDEPS)
	$(CC) $(LDFLAGS) -o $(TRG) $(OBJDEPS) -L $(INC) -l $(LIBS)

# Production des fichiers objets
# De C à objet
%.o: %.c
	$(CC) $(CFLAGS) -c $<
# De C++ à objet
%.o: %.cpp
	$(CC) $(CFLAGS) $(CXXFLAGS) -c $<

# Vérification des dépendances (header dependencies)
# http://bit.ly/2580FU8
-include *.d

# Production des fichiers .hex à partir des fichiers .elf
%.hex: %.elf
	$(OBJCOPY) -j .text -j .data \
		-O $(HEXFORMAT) $< $@

# Compiler et écrire le projet en mémoire flash dans le microcontrôleur
# (cable USB requis)
install: $(HEXROMTRG)				
	$(AVRDUDE) -c $(AVRDUDE_PROGRAMMERID)   \
	-p $(MCU) -P -e -U flash:w:$(HEXROMTRG)

# Make clean permet d'effacer tout les fichiers générés
# lors de la compilation
clean:
	$(REMOVE) $(TRG) $(TRG).map $(OBJDEPS) $(HEXTRG) *.d

# Pour plus d'information sur les phony target, consulter:
# http://bit.ly/1WBQe61

#####                    EOF                   #####
